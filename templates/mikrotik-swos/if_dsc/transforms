# Get bit speed delta (so we dont have to provide custom delta limit)
ifInPkts      : MATH  	: {ifHCInUcastPkts} + {ifHCInMulticastPkts} + {ifHCInBroadcastPkts}
ifOutPkts     : MATH  	: {ifHCOutUcastPkts} + {ifHCOutMulticastPkts} + {ifHCOutBroadcastPkts}
# Do delta transform on all counters and clone delta result to have result without threshold/message/error 
# as ifInDscPct depends on ifInDscPpsi(Tmp) but dont want to have its specific threshold/message/error propagation 
ifInPps         : DELTA         : {ifInPkts}
ifOutPps        : DELTA         : {ifOutPkts}
ifInDscPpsTmp	: DELTA		: {ifInDiscards}
ifInDscPps      : REGSUB        : {ifInDscPpsTmp} /(.*)/$1/
ifOutDscPpsTmp  : DELTA		: {ifOutDiscards}
ifOutDscPps     : REGSUB        : {ifOutDscPpsTmp} /(.*)/$1/
# Perform percentage calculations
ifInDscPct	: MATH		: ({ifInDscPpsTmp}  / {ifInPps})  x 100
ifOutDscPct	: MATH		: ({ifOutDscPpsTmp} / {ifOutPps}) x 100
ifInDscBest     : BEST          : {ifInDscPct}      , {ifInDscPps}
ifOutDscBest    : BEST          : {ifOutDscPct}     , {ifOutDscPps}
ifDscAlarm      : WORST         : {ifInDscBest}     , {ifOutDscBest}
# Create an alias in a bracketed box, or nothing if alias is blank
ifAliasBox      : REGSUB        : {ifAlias}        /(\S+.*)/ [$1]/
ifIndex         : INDEX         : {ifDescr}
ifPri           : REGSUB        : {ifIndex}        /(\S+.*)/sprintf('%05s', $1).'-'.{ifDescr}/e
