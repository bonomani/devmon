# Get bit speed delta (so we dont have to provide custom delta limit)
ifInPkts      		: MATH  	: {ifHCInUcastPkts} + {ifHCInMulticastPkts} + {ifHCInBroadcastPkts}
ifOutPkts    		: MATH  	: {ifHCOutUcastPkts} + {ifHCOutMulticastPkts} + {ifHCOutBroadcastPkts}
# Do delta transform on all counters and clone delta result to have result without threshold/message/error 
# as ifInDscPct depends on ifInDscPpsi(Tmp) but dont want to have its specific threshold/message/error propagation 
ifInPps         	: DELTA         : {ifInPkts}
ifOutPps        	: DELTA         : {ifOutPkts}
ifInDscPpsTmp		: DELTA		: {ifInDiscards}
ifInDscPps      	: REGSUB        : {ifInDscPpsTmp} /(.*)/$1/
ifOutDscPpsTmp  	: DELTA		: {ifOutDiscards}
ifOutDscPps     	: REGSUB        : {ifOutDscPpsTmp} /(.*)/$1/
# Perform percentage calculations
ifInDscPctNaN		: MATH		: ({ifInDscPpsTmp}  / {ifInPps})  x 100
ifOutDscPctNaN		: MATH		: ({ifOutDscPpsTmp} / {ifOutPps}) x 100
ifInDscPct      	: SWITCH        : {ifInDscPctNaN} 'NaN'=0.00,default={ifInDscPctNaN}
ifOutDscPct     	: SWITCH        : {ifOutDscPctNaN} 'NaN'=0.00,default={ifOutDscPctNaN}
ifInDscBest     	: BEST          : {ifInDscPctTxt}      , {ifInDscPpsTxt}
ifOutDscBest    	: BEST          : {ifOutDscPctTxt}     , {ifOutDscPpsTxt}
ifDscAlarm      	: WORST         : {ifInDscBest}     , {ifOutDscBest}
# Create an alias in a bracketed box, or nothing if alias is blank
ifAliasBox      	: REGSUB        : {ifAlias}        /(\S+.*)/ [$1]/
ifIndex         	: INDEX         : {ifDescr}
ifPri           	: REGSUB        : {ifIndex}        /(\S+.*)/sprintf('%05s', $1).'-'.{ifDescr}/e

ifInDscPctTxt           : SWITCH        : {ifOperStatNum} '1'={ifInDscPct}%,'2'=ifDown,default=error
ifOutDscPctTxt          : SWITCH        : {ifOperStatNum} '1'={ifOutDscPct}%,'2'=ifDown,default=error
ifInDscPpsTxt           : SWITCH        : {ifOperStatNum} '1'={ifInDscPps}%,'2'=ifDown,default=error
ifOutDscPpsTxt          : SWITCH        : {ifOperStatNum} '1'={ifOutDscPps}%,'2'=ifDown,default=error
